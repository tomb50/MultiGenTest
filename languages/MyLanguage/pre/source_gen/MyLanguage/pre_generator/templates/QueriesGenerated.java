package MyLanguage.pre_generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static void mappingScript_CodeBlock_1(final MappingScriptContext _context) {
    ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.C1$Iq)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode internalC1 = SModelOperations.createNewRootNode(_context.getModel(), MetaAdapterFactory.getConcept(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27aa1b4L, "MyLanguage.structure.InternalC1"));
        SPropertyOperations.assign(internalC1, PROPS.name$MnvL, SPropertyOperations.getString(it, PROPS.name$MnvL));
      }
    });

    ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.C2$IT)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode internalC2 = SModelOperations.createNewRootNode(_context.getModel(), MetaAdapterFactory.getConcept(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27aa1b5L, "MyLanguage.structure.InternalC2"));
        SPropertyOperations.assign(internalC2, PROPS.name$MnvL, SPropertyOperations.getString(it, PROPS.name$MnvL));
        final SNode c1 = SLinkOperations.getTarget(it, LINKS.c1Ref$GJuS);
        if ((c1 != null)) {
          SNode internalC1 = ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.InternalC1$KJ)).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(it, PROPS.name$MnvL) == SPropertyOperations.getString(c1, PROPS.name$MnvL);
            }
          }).first();
          SLinkOperations.setTarget(internalC2, LINKS.c1ref$tNIk, internalC1);
        }
      }
    });
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("7747332925455865250", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_1(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept C1$Iq = MetaAdapterFactory.getConcept(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27a1df6L, "MyLanguage.structure.C1");
    /*package*/ static final SConcept C2$IT = MetaAdapterFactory.getConcept(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27a1df7L, "MyLanguage.structure.C2");
    /*package*/ static final SConcept InternalC1$KJ = MetaAdapterFactory.getConcept(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27aa1b4L, "MyLanguage.structure.InternalC1");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink c1Ref$GJuS = MetaAdapterFactory.getReferenceLink(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27a1df7L, 0x6b840e3fa27a1df8L, "c1Ref");
    /*package*/ static final SReferenceLink c1ref$tNIk = MetaAdapterFactory.getReferenceLink(0xb808eb8617bb451bL, 0x8c4657da0ebdf198L, 0x6b840e3fa27aa1b5L, 0x6b840e3fa27c080eL, "c1ref");
  }
}
